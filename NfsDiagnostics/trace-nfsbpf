#!/usr/bin/env python
from bcc import BPF
from bcc.utils import printb
from time import sleep
import os

# define BPF program
bpf_text= """
#include <linux/sched.h>
BPF_HASH(callers_page_error, u64, unsigned long);
BPF_HASH(callers_pgio_error, u64, unsigned long);
BPF_HASH(callers_inode_event, u64, unsigned long);

struct nfs_page_error_ctx {
	u64 __pad;
	u64 req;
	u64 index;
	u32 offset;
	u32 pgbase;
	u32 bytes;
	u32 error;
};

struct nfs_pgio_error_ctx {
	u64 __pad;
	u32 dev;
	u32 fhandle;
	u64 fileid;
	u64 offset;
	u32 arg_count;
	u32 res_count;
	u64 pos;
	u32 status;
};

struct nfs_inode_event_ctx {
	u64 __pad;
	u64 error;
	u32 dev;
	u32 fhandle;
	char type;
	u64 fileid;
	u64 version;
	u64 size;
	u64 nfsi_flags;
	u64 cache_validity;
};

int trace_page_error(struct nfs_page_error_ctx *args) {
	u64 key = 0;
	unsigned long value;

	if (args->error > 0) {
		value = args->error;
		callers_page_error.update(&key, &value);
	}

	return 0;
}

int trace_pgio_error(struct nfs_pgio_error_ctx *args) {
	u64 key = 0;
	unsigned long value;

	if (args->status > 0) {
		value = args->status;
		callers_pgio_error.update(&key, &value);
	}

	return 0;
}

int trace_inode_event(struct nfs_inode_event_ctx *args) {
	u64 key = 0;
	unsigned long value;

	if (args->error > 0) {
		value = args->error;
		callers_inode_event.update(&key, &value);
	}

	return 0;
}
"""

b = BPF(text=bpf_text)
b.attach_tracepoint(tp="nfs:nfs_write_error", fn_name="trace_page_error")
b.attach_tracepoint(tp="nfs:nfs_comp_error", fn_name="trace_page_error")
b.attach_tracepoint(tp="nfs:nfs_commit_error", fn_name="trace_page_error")
b.attach_tracepoint(tp="nfs:nfs_pgio_error", fn_name="trace_pgio_error")
b.attach_tracepoint(tp="nfs:nfs_writeback_page_exit", fn_name="trace_inode_event")
b.attach_tracepoint(tp="nfs:nfs_writeback_inode_exit", fn_name="trace_inode_event")

class stop_and_collapse(Exception):
    pass

while 1:
    try:
        sleep(1);
        for k,v in b["callers_page_error"].items():
            raise stop_and_collapse
        for k,v in b["callers_pgio_error"].items():
            raise stop_and_collapse
        for k,v in b["callers_inode_event"].items():
            raise stop_and_collapse
    except KeyboardInterrupt:
        exit()
    except stop_and_collapse:
        break;

fd=open("/tmp/nfsclientlog.pid", "r");
trace_pid=fd.readline();
tcpdump_pid=fd.readline();
print(tcpdump_pid)
command = "kill -INT %s" % (tcpdump_pid)
os.system(command);
command = "kill -INT %s" % (trace_pid)
os.system(command);
sleep(3)
os.system("trace-cmd report 2>&1 > nfs_trace")
os.system("sudo dmesg -c > nfs_dmesg")
os.system("zip nfs_debug.zip nfs_dmesg nfs_trace nfs_traffic.pcap")
os.system("rm -rf /tmp/nfsclientlog.pid")

